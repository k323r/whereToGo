>>>
http://www.movable-type.co.uk/scripts/latlong.html

Bearing

In general, your current heading will vary as you follow a great
circle path (orthodrome); the final heading will differ from the
initial heading by varying degrees according to distance and
latitude (if you were to go from say 35°N,45°E (≈ Baghdad) to
35°N,135°E (≈ Osaka), you would start on a heading of 60° and
end up on a heading of 120°!).

This formula is for the initial bearing (sometimes referred to
as forward azimuth) which if followed in a straight line along a
great-circle arc will take you from the start point to the end
point:1

Formula:    θ = atan2( sin Δλ ⋅ cos φ2 , cos φ1 ⋅ sin φ2 − sin φ1 ⋅ cos φ2 ⋅ cos Δλ )

Formula:    θ = atan2( sin(b.lon_rad - a.lon_rad) * cos(b.lat_rad) , cos(a.lat_rad) * sin(b.lat_rad) - sin(a.lat_rad) * cos(b.lat_rad) * cos(b.lon_rad - a.lon_rad) )

where   φ1,λ1 is the start point, φ2,λ2 the end point (Δλ is the difference in longitude)
JavaScript:
(all angles
in radians)
    

var y = Math.sin(λ2-λ1) * Math.cos(φ2);
var x = Math.cos(φ1)*Math.sin(φ2) -
        Math.sin(φ1)*Math.cos(φ2)*Math.cos(λ2-λ1);
var brng = Math.atan2(y, x).toDegrees();
<<<


>>>
http://www.igismap.com/formula-to-find-bearing-or-heading-angle-between-two-points-latitude-longitude/

    Let ‘R’ be the radius of Earth,
    ‘L’ be the longitude,
    ‘θ’ be latitude,
    ‘β‘ be Bearing.

Denote point A and B as two different points, where ‘La’ is
point A longitude and ‘θa’ is point A latitude, similarly assume
for point B. Bearing would be measured from North direction i.e
0° bearing means North, 90° bearing is East, 180° bearing is
measured to be South, and 270° to be West.

Note: If bearing is denoted with +ve or –ve initials whose
values lies between 0° to 180°, then –ve is denoted for South
and West sides. Formula to find Bearing, when two different
points latitude, longitude is given:

Bearing from point A to B, can be calculated as,

β = atan2(X,Y),

where, X and Y are two quantities and can be calculated as:

X = cos θb * sin ∆L

Y = cos θa * sin θb – sin θa * cos θb * cos ∆L

<<<


>>>
http://www.movable-type.co.uk/scripts/latlong.html

Haversine
formula:
a = sin²(Δφ/2) + cos φ1 ⋅ cos φ2 ⋅ sin²(Δλ/2)
c = 2 ⋅ atan2( √a, √(1−a) )
d = R ⋅ c
where   φ is latitude, λ is longitude, R is earth’s radius (mean radius = 6,371km);
note that angles need to be in radians to pass to trig functions!
JavaScript:     

var R = 6371e3; // metres
var φ1 = lat1.toRadians();
var φ2 = lat2.toRadians();
var Δφ = (lat2-lat1).toRadians();
var Δλ = (lon2-lon1).toRadians();

var a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
        Math.cos(φ1) * Math.cos(φ2) *
        Math.sin(Δλ/2) * Math.sin(Δλ/2);
var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

var d = R * c;

Note in these scripts, I generally use lat/lon for lati­tude/longi­tude in degrees, and φ/λ for lati­tude/longi­tude in radians – having found that mixing degrees & radians is often the easiest route to head-scratching bugs...
<<<